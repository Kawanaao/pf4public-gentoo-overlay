diff --git a/package.json b/package.json
--- a/package.json
+++ b/package.json
@@ -111,6 +111,7 @@
     "vscode-oniguruma": "1.7.0",
     "vscode-regexpp": "^3.1.0",
     "vscode-textmate": "9.1.0",
+    "which": "^5.0.0",
     "yauzl": "^3.0.0",
     "yazl": "^2.4.3"
   },
@@ -130,6 +131,7 @@
     "@types/trusted-types": "^1.0.6",
     "@types/vscode-notebook-renderer": "^1.72.0",
     "@types/webpack": "^5.28.5",
+    "@types/which": "^3.0.4",
     "@types/wicg-file-system-access": "^2020.9.6",
     "@types/windows-foreground-love": "^0.3.0",
     "@types/winreg": "^1.2.30",
diff --git a/src/vs/platform/native/electron-main/nativeHostMainService.ts b/src/vs/platform/native/electron-main/nativeHostMainService.ts
--- a/src/vs/platform/native/electron-main/nativeHostMainService.ts
+++ b/src/vs/platform/native/electron-main/nativeHostMainService.ts
@@ -5,0 +5,2 @@
+import { tmpdir } from "os"
+import { sync as whichSync } from "which"
@@ -609,31 +610,69 @@ export class NativeHostMainService extends Disposable implements INativeHostMain
 
 	@memoize
 	private get cliPath(): string {
+		const stdCliPath = (() => {
+			// Windows
+			if (isWindows) {
+				if (this.environmentMainService.isBuilt) {
+					return join(dirname(process.execPath), 'bin', `${this.productService.applicationName}.cmd`);
+				}
 
-		// Windows
-		if (isWindows) {
-			if (this.environmentMainService.isBuilt) {
-				return join(dirname(process.execPath), 'bin', `${this.productService.applicationName}.cmd`);
+				return join(this.environmentMainService.appRoot, 'scripts', 'code-cli.bat');
 			}
 
-			return join(this.environmentMainService.appRoot, 'scripts', 'code-cli.bat');
-		}
+			// Linux
+			if (isLinux) {
+				if (this.environmentMainService.isBuilt) {
+					return join(dirname(process.execPath), 'bin', `${this.productService.applicationName}`);
+				}
 
-		// Linux
-		if (isLinux) {
+				return join(this.environmentMainService.appRoot, 'scripts', 'code-cli.sh');
+			}
+
+			// macOS
 			if (this.environmentMainService.isBuilt) {
-				return join(dirname(process.execPath), 'bin', `${this.productService.applicationName}`);
+				return join(this.environmentMainService.appRoot, 'bin', 'code');
 			}
 
 			return join(this.environmentMainService.appRoot, 'scripts', 'code-cli.sh');
-		}
+		})()
 
-		// macOS
-		if (this.environmentMainService.isBuilt) {
-			return join(this.environmentMainService.appRoot, 'bin', 'code');
-		}
+		const isStdCliAccessible = (() => {
+			try {
+				fs.statSync(stdCliPath, { throwIfNoEntry: true })
+				fs.accessSync(stdCliPath, fs.constants.R_OK | fs.constants.X_OK)
+				return true
+			} catch (err) {
+				return false
+			}
+		})()
+
+		if (isStdCliAccessible)
+			return stdCliPath
+
+		const systemCliBin = whichSync(this.productService.applicationName, { all: false, nothrow: true })
+
+		if (systemCliBin)
+			return systemCliBin
+
+		const redirector = process.platform !== "win32" ? "$@" : "%*"
+
+		return this.createTmpScript("code-argv", `${process.argv.join(" ")} ${redirector}`)
+	}
+
+	private createTmpScript(name: string, command: string): string {
+		const sanitizedName = name.replace(/[^a-zA-Z0-9]/g, '_');
+		const isUnix = process.platform !== "win32"
+		const extension = isUnix ? "sh" : "cmd"
+		const tmpScript = join(tmpdir(), `${sanitizedName}-${process.pid}.${extension}`)
+		const header = isUnix ? "#!/bin/sh" : "@echo off"
+
+		fs.writeFileSync(tmpScript, `${header}\n` + `${command}\n`, {
+			flag: "a+",
+			mode: fs.constants.S_IXUSR | fs.constants.S_IRUSR | fs.constants.S_IWUSR
+		})
 
-		return join(this.environmentMainService.appRoot, 'scripts', 'code-cli.sh');
+		return tmpScript
 	}
 
 	async getOSStatistics(): Promise<IOSStatistics> {
diff --git a/yarn.lock b/yarn.lock
--- a/yarn.lock
+++ b/yarn.lock
@@ -1335,6 +1300,11 @@
     tapable "^2.2.0"
     webpack "^5"
 
+"@types/which@^3.0.4":
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/@types/which/-/which-3.0.4.tgz#2c3a89be70c56a84a6957a7264639f39ae4340a1"
+  integrity sha512-liyfuo/106JdlgSchJzXEQCVArk0CvevqPote8F8HgWgJ3dRCcTHgJIsLDuee0kxk/mhbInzIZk3QWSZJ8R+2w==
+
 "@types/wicg-file-system-access@^2020.9.6":
   version "2020.9.6"
   resolved "https://registry.yarnpkg.com/@types/wicg-file-system-access/-/wicg-file-system-access-2020.9.6.tgz#da34476b1e29451c8b7aa1a6db86b185647cd970"
@@ -6194,6 +5874,11 @@ isexe@^2.0.0:
   resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
   integrity sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=
 
+isexe@^3.1.1:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/isexe/-/isexe-3.1.1.tgz#4a407e2bd78ddfb14bea0c27c6f7072dde775f0d"
+  integrity sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==
+
 isobject@^2.0.0:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/isobject/-/isobject-2.1.0.tgz#f065561096a3f1da2ef46272f815c840d87e0c89"
@@ -10866,6 +10201,13 @@ which@^2.0.1:
   dependencies:
     isexe "^2.0.0"
 
+which@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/which/-/which-5.0.0.tgz#d93f2d93f79834d4363c7d0c23e00d07c466c8d6"
+  integrity sha512-JEdGzHwwkrbWoGOlIHqQ5gtprKGOenpDHpxE9zVR1bWbOtYRyPPHMe9FaP6x61CmNaTThSkb0DAJte5jD+DmzQ==
+  dependencies:
+    isexe "^3.1.1"
+
 wildcard@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/wildcard/-/wildcard-2.0.0.tgz#a77d20e5200c6faaac979e4b3aadc7b3dd7f8fec"
